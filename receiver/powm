function remainder = powm (number, power, modulo)
% binary decomposition
bin(1,1) = 1;
col = 2;
while ( bin(1, col-1) <= power-bin(1, col-1) )
    bin(1, col) = 2*bin(1, col-1);
    col = col + 1;
end
% flip matrix
bin = fliplr(bin);
% extract binary decomposition from numberresult = power;
res=power;
cols = length(bin);
extr_bin = zeros(1, cols);
index = zeros(1, cols);
for ( col=1 : cols )
    if( res-bin(1, col) > 0 )
        res = res - bin(1, col);
        extr_bin(1, col) = bin(1, col);
        index(1, col) = col;        
    elseif ( res-bin(1, col) == 0 )
        
        extr_bin(1, col) = bin(1, col);
        index(1, col) = col;                
        break;
        
    end
end
% flip matrix
bin = fliplr(bin);

% doubling the powers by squaring the numbers

cols2 = length(extr_bin);
rem_sqr = zeros(1, cols);
rem_sqr(1, 1) = mod(number^1, modulo);

if ( cols2 > 1 )
    for ( col=2 : cols)
        rem_sqr(1, col) = mod(rem_sqr(1, col-1)^2, modulo);
    end
end
% flip matrix
rem_sqr = fliplr(rem_sqr);

% compute reminder

index = find(index);

remainder = rem_sqr(1, index(1, 1));

cols = length(index);
for (col=2 : cols)
    remainder = mod(remainder*rem_sqr(1, index(1, col)), modulo);
end
